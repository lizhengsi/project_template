/*
 * @Description: 
 * @Version:  
 * @Autor:  
 * @Date: 2022-06-20 14:46:02
 * @LastEditors:  
 * @LastEditTime: 2023-02-08 15:08:25
 *  Copyright 2022 lanxin
 */
{
    "files.associations": {
        "*.puml": "plantuml",
        "cctype": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "cwchar": "cpp",
        "array": "cpp",
        "atomic": "cpp",
        "strstream": "cpp",
        "*.tcc": "cpp",
        "chrono": "cpp",
        "complex": "cpp",
        "cstdint": "cpp",
        "ctime": "cpp",
        "cwctype": "cpp",
        "deque": "cpp",
        "list": "cpp",
        "unordered_map": "cpp",
        "vector": "cpp",
        "exception": "cpp",
        "algorithm": "cpp",
        "functional": "cpp",
        "optional": "cpp",
        "string_view": "cpp",
        "system_error": "cpp",
        "tuple": "cpp",
        "type_traits": "cpp",
        "fstream": "cpp",
        "initializer_list": "cpp",
        "iomanip": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "limits": "cpp",
        "memory": "cpp",
        "new": "cpp",
        "ostream": "cpp",
        "numeric": "cpp",
        "ratio": "cpp",
        "sstream": "cpp",
        "stdexcept": "cpp",
        "streambuf": "cpp",
        "thread": "cpp",
        "utility": "cpp",
        "typeinfo": "cpp",
        "valarray": "cpp",
        "iterator": "cpp",
        "map": "cpp",
        "memory_resource": "cpp",
        "random": "cpp",
        "set": "cpp",
        "string": "cpp",
        "bit": "cpp",
        "bitset": "cpp",
        "cinttypes": "cpp",
        "csignal": "cpp",
        "codecvt": "cpp",
        "condition_variable": "cpp",
        "unordered_set": "cpp",
        "hash_map": "cpp",
        "hash_set": "cpp",
        "future": "cpp",
        "mutex": "cpp",
        "cfenv": "cpp",
        "typeindex": "cpp",
        "__bit_reference": "cpp",
        "__config": "cpp",
        "__debug": "cpp",
        "__functional_base": "cpp",
        "__hash_table": "cpp",
        "__locale": "cpp",
        "__mutex_base": "cpp",
        "__nullptr": "cpp",
        "__split_buffer": "cpp",
        "__string": "cpp",
        "__threading_support": "cpp",
        "__tree": "cpp",
        "__tuple": "cpp",
        "ios": "cpp",
        "locale": "cpp",
        "queue": "cpp",
        "stack": "cpp",
        "geometry": "cpp",
        "*.ipp": "cpp"
    },
    // "fileheader.configObj": {
    //     "createHeader": false, // 新建⽂件⾃动添加头部注释
    //     "autoAdd": false, // 检测⽂件没有头部注释，⾃动添加⽂件头部注释
    //     "autoAlready": false, // 只让⽀持的语⾔，⾃动添加头部注释
    //     "customHasHeadEnd": {
    //         "cpp": "cancel head and function"
    //     },
    //     "language": {
    //         // ⼀次匹配多种⽂件后缀⽂件 不⽤重复设置
    //         "h/hpp/cpp/cc": {
    //             "middle": "//"
    //         }
    //     }
    // },
    "fileheader.customMade": {
        "custom_string_obkoro1_copyright": "Copyright ${now_year} lanxin"
    },
    "files.insertFinalNewline": true, // ⽂件末尾⾃动插⼊⼀空⾏
    "C_Cpp.clang_format_style": "Google",
    "ros.distro": "melodic",
    "clangd.arguments": [
        // 让 Clangd 生成更详细的日志
        "--log=verbose",
        // 输出的 JSON 文件更美观
        "--pretty",
        // 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)
        "--all-scopes-completion",
        // 建议风格：打包(重载函数只会给出一个建议）
        // 相反可以设置为detailed
        "--completion-style=bundled",
        // 跨文件重命名变量
        "--cross-file-rename",
        // 允许补充头文件
        "--header-insertion=iwyu",
        // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion-decorators",
        // 在后台自动分析文件(基于 complie_commands，我们用CMake生成)
        "--background-index",
        // 启用 Clang-Tidy 以提供「静态检查」
        "--clang-tidy",
        // Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」
        // 参数后部分的*表示通配符
        // 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则
        "--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*",
        // 默认格式化风格: 谷歌开源项目代码指南
        // "--fallback-style=file",
        // 同时开启的任务数量
        "-j=2",
        // pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk
        "--pch-storage=disk",
        // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        // 我选择禁用
        "--function-arg-placeholders=false",
        // compelie_commands.json 文件的目录位置(相对于工作区，由于 CMake 生成的该文件默认在 build 文件夹中，故设置为 build)
        "--compile-commands-dir=/mnt/home/Data/SLAM/markerslam/ros/markerslam_ws/build"
    ],
    // "clang-tidy.buildPath": "/mnt/home/Data/SLAM/markerslam/ros/markerslam_ws/build",
    // "sonarlint.pathToCompileCommands": "/mnt/home/Data/SLAM/markerslam/ros/markerslam_ws/build/compile_commands.json",
    "python.autoComplete.extraPaths": [
        "/mnt/home/Data/Workspace/ROS_Melodic/kalibr_ws/devel/lib/python2.7/dist-packages",
        "/mnt/home/Data/Workspace/ROS_Melodic/tagslam_ws/devel/lib/python2.7/dist-packages",
        "/mnt/home/Data/Workspace/ROS_Melodic/marker_ws/devel/lib/python2.7/dist-packages",
        "/opt/ros/melodic/lib/python2.7/dist-packages"
    ]
}
